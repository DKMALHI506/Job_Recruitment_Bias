## install libaries using pip%

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import shap  # this was a pain to install, kept crashing at first



                ## Load the data 
cols = ['age', 'workclass', 'fnlwgt', 'education', 'edu-num', 'marital-status', 
        'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 
        'hours-per-week', 'native-country', 'income']
data = pd.read_csv('/content/drive/MyDrive/datadownloand/adult (1).data', names=cols, na_values=' ?')

data = data.dropna()  ## drop missing stuff
data.loc[:, 'hired'] = data['income'].apply(lambda x: 1 if x.strip() == '>50K' else 0)  


le = LabelEncoder()
for col in ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 
            'race', 'sex', 'native-country']:
    data[col] = le.fit_transform(data[col])


X = data.drop(['income', 'hired', 'fnlwgt'], axis=1)  # fnlwgt seemed weird, dropped it
y = data['hired']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)




          ## Train a basic Random Forest
model = RandomForestClassifier(n_estimators=50, random_state=42)  # smaller for speed
model.fit(X_train, y_train)
accuracy = model.score(X_test, y_test)
print(f"Model accuracy: {accuracy}") 




        ## Check bias by sex 
test_data = X_test.copy()
test_data['hired_pred'] = model.predict(X_test)
male_hire_rate = test_data[test_data['sex'] == 1]['hired_pred'].mean()  # 1 is male
female_hire_rate = test_data[test_data['sex'] == 0]['hired_pred'].mean()  # 0 is female
print(f"Male hire rate: {male_hire_rate:.3f}, Female hire rate: {female_hire_rate:.3f}")



          ## Plot it
bars = plt.bar(['Male', 'Female'], [male_hire_rate, female_hire_rate], color=['green', 'orange'])
plt.title("Gender Bias in AI Hiring Predictions")
plt.ylabel("Hire Rate")
plt.ylim(0, 0.3)  # set a max to make it look nicer
for bar in bars:  # add values on top
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f"{yval:.3f}", ha='center')
plt.savefig('/content/bias_plot.png')
plt.show()
